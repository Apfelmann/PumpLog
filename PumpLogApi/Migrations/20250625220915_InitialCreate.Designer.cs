// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PumpLogApi.Data;

#nullable disable

namespace PumpLogApi.Migrations
{
    [DbContext(typeof(PumpLogDbContext))]
    [Migration("20250625220915_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PumpLogApi.Entities.Section", b =>
                {
                    b.Property<Guid>("SectionGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("SectionType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<Guid>("SessionGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("order")
                        .HasColumnType("integer");

                    b.HasKey("SectionGuid");

                    b.HasIndex("SessionGuid");

                    b.ToTable("Sections", (string)null);

                    b.HasDiscriminator<string>("SectionType").HasValue("Section");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("PumpLogApi.Entities.Session", b =>
                {
                    b.Property<Guid>("SessionGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("SessionNumber")
                        .HasColumnType("integer");

                    b.HasKey("SessionGuid");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("PumpLogApi.Entities.StrengthSet", b =>
                {
                    b.Property<Guid>("StrengthSetGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("boolean");

                    b.Property<int>("Reps")
                        .HasColumnType("integer");

                    b.Property<Guid>("SectionGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("SetNumber")
                        .HasColumnType("integer");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric");

                    b.HasKey("StrengthSetGuid");

                    b.HasIndex("SectionGuid");

                    b.ToTable("StrengthSets");
                });

            modelBuilder.Entity("PumpLogApi.Entities.CrossfitSection", b =>
                {
                    b.HasBaseType("PumpLogApi.Entities.Section");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WodName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Crossfit");
                });

            modelBuilder.Entity("PumpLogApi.Entities.StrengthSection", b =>
                {
                    b.HasBaseType("PumpLogApi.Entities.Section");

                    b.Property<string>("ExerciseName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Strength");
                });

            modelBuilder.Entity("PumpLogApi.Entities.Section", b =>
                {
                    b.HasOne("PumpLogApi.Entities.Session", "Session")
                        .WithMany("Sections")
                        .HasForeignKey("SessionGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("PumpLogApi.Entities.StrengthSet", b =>
                {
                    b.HasOne("PumpLogApi.Entities.StrengthSection", "StrengthSection")
                        .WithMany("StrengthSets")
                        .HasForeignKey("SectionGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StrengthSection");
                });

            modelBuilder.Entity("PumpLogApi.Entities.Session", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("PumpLogApi.Entities.StrengthSection", b =>
                {
                    b.Navigation("StrengthSets");
                });
#pragma warning restore 612, 618
        }
    }
}
